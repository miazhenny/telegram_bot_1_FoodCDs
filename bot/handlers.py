# bot/handlers.py

from telegram import Update
from telegram.ext import CallbackContext, CommandHandler, MessageHandler, Filters, CallbackQueryHandler

from bot.menus import main_menu, inline_buttons, button_handler
from bot.utils import load_wins, save_wins
from bot.jfood import add_jfood, jfood_cd, lvlup_cd
from bot.jobs import test_reminder, test_pytutor
from bot.config import START_DATE
from data.motivational_quotes import motivational_quotes
from bot.config import ADMIN_ID


def start(update: Update, context: CallbackContext):
    print("‚öôÔ∏è –ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    update.message.reply_text("I am your personal motivation coach! üöÄ")

    context.user_data["chat_id"] = update.effective_chat.id
    chat_id = update.effective_chat.id

    main_menu(update, context)


def motivate(update: Update, context: CallbackContext):
    from random import choice
    quote = choice(motivational_quotes)
    update.message.reply_text(quote)


def creator(update: Update, context: CallbackContext):
    update.message.reply_text("Created by Snakedog")


def info(update: Update, context: CallbackContext):
    update.message.reply_text("–Ø –º–æ—Ç–∏–≤–∞—Ç–æ—Ä-–±–æ—Ç. –Ø —É–º–µ—é –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±—è, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ —Å–µ–±–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π!")


def picture(update: Update, context: CallbackContext):
    with open("1_onYT.png", 'rb') as photo:
        update.message.reply_photo(photo, caption="nevagivup!")


def video(update: Update, context: CallbackContext):
    with open('files/video.mp4', 'rb') as vid:
        update.message.reply_video(vid, caption="—è –∂–¥—É —Ç–≤–æ–π –Ω–æ–≤—ã–π —Ç—Ä–µ–∫! –¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª —Ü–µ–ª—å –≤—ã–ø—É—Å–∫–∞—Ç—å —Ç—Ä–µ–∫ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é! –Ø –ø–æ–º–Ω—é, –∏ –Ω–µ –¥–∞–º –∑–∞–±—ã—Ç—å —Ç–µ–±–µ!")


wins = []  # –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥

def handle_message(update: Update, context: CallbackContext):
    text = update.message.text.lower()

    if context.user_data.get("waiting_for_win"):
        wins.append(update.message.text)
        save_wins()
        update.message.reply_text("–ü–æ–±–µ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üí™")
        context.user_data["waiting_for_win"] = False
        return

    if "–ø—Ä–∏–≤–µ—Ç" in text:
        update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üöÄ")
    elif "–ø–æ–∫–∞" in text:
        update.message.reply_text("–î–æ –≤—Å—Ç—Ä–µ—á–∏, –¥—Ä—É–≥! üëã")
    elif "–∫–∞–∫ –¥–µ–ª–∞" in text:
        update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º –∏ —Ä–∞—Å—Ç—ë–º! –ê —É —Ç–µ–±—è –∫–∞–∫?")
    else:
        update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è —Å–µ–π—á–∞—Å. –í–æ—Ç –º–µ–Ω—é:")
        main_menu(update, context)


def mood(update: Update, context: CallbackContext):
    mood = " ".join(context.args)
    context.user_data["mood"] = mood
    update.message.reply_text(f"üß† –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {mood}")


def remind_on(update: Update, context: CallbackContext):
    from datetime import time
    from bot.jobs import stage_day_reminder, pytutor_reminder

    chat_id = context.user_data.get("chat_id")
    if not chat_id:
        chat_id = ADMIN_ID
        context.bot.send_message(chat_id=chat_id, text="‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏ /start —Å–Ω–∞—á–∞–ª–∞, —á—Ç–æ–±—ã —è –º–æ–≥ —Å —Ç–æ–±–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å.")
        return

    job_queue = context.job_queue

    job_queue.run_daily(
        stage_day_reminder,
        time(hour=4, minute=0),
        context=chat_id,
        name=str(chat_id)
    )

    job_queue.run_daily(
        pytutor_reminder,
        time=time(hour=8, minute=15),
        context=chat_id
    )

    job_queue.run_daily(
        pytutor_reminder,
        time=time(hour=19, minute=15),
        context=chat_id
    )

    update.message.reply_text("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!")


def register_handlers(dispatcher):
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("motivate", motivate))
    dispatcher.add_handler(CommandHandler("creator", creator))
    dispatcher.add_handler(CommandHandler("info", info))
    dispatcher.add_handler(CommandHandler("picture", picture))
    dispatcher.add_handler(CommandHandler("video", video))
    dispatcher.add_handler(CommandHandler("add_jfood", add_jfood))
    dispatcher.add_handler(CommandHandler("jfood_cd", jfood_cd))
    dispatcher.add_handler(CommandHandler("lvlup_cd", lvlup_cd))
    dispatcher.add_handler(CommandHandler("mood", mood))
    dispatcher.add_handler(CommandHandler("test_reminder", test_reminder))
    dispatcher.add_handler(CommandHandler("test_pytutor", test_pytutor))
    dispatcher.add_handler(CommandHandler("remind_on", remind_on))
    dispatcher.add_handler(CommandHandler("menu", main_menu))
    dispatcher.add_handler(CommandHandler("links", inline_buttons))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
