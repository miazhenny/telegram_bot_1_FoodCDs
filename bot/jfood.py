# bot/jfood.py

import json
import os
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import CallbackContext
from config import JFOOD_FILE


def load_jfood():
    if os.path.exists(JFOOD_FILE):
        with open(JFOOD_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        return {
            "cooldown_level": 0,
            "last_jfood_date": None
        }


def save_jfood(data):
    with open(JFOOD_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def add_jfood(update: Update, context: CallbackContext):
    if not context.args:
        update.message.reply_text("‚ö† –£–∫–∞–∂–∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /add_jfood 01.05.2025")
        return

    try:
        last_date = datetime.strptime(context.args[0], "%d.%m.%Y").date()
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú.–ì–ì–ì–ì")
        return

    data = load_jfood()
    data["last_jfood_date"] = last_date.strftime("%Y-%m-%d")
    save_jfood(data)

    cd_days = 30 + data["cooldown_level"]
    next_date = last_date + timedelta(days=cd_days)

    update.message.reply_text(
        f"üçî –î–∂–∞–Ω–∫—Ñ—É–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: {last_date.strftime('%d.%m.%Y')}\n"
        f"–ö—É–ª–¥–∞—É–Ω Lv.{data['cooldown_level']} –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è: {next_date.strftime('%d.%m.%Y')}"
    )


def jfood_cd(update: Update, context: CallbackContext):
    data = load_jfood()

    if not data["last_jfood_date"]:
        update.message.reply_text("üçî –¢—ã –µ—â—ë –Ω–µ –µ–ª –¥–∂–∞–Ω–∫—Ñ—É–¥, –Ω–µ—Ç –¥–∞—Ç—ã!")
        return

    last_date = datetime.strptime(data["last_jfood_date"], "%Y-%m-%d").date()
    cd_days = 30 + data["cooldown_level"]
    next_date = last_date + timedelta(days=cd_days)
    today = datetime.now().date()
    remaining = (next_date - today).days

    if remaining > 0:
        update.message.reply_text(
            f"üçü –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∂–∞–Ω–∫—Ñ—É–¥: {last_date.strftime('%d.%m.%Y')}\n"
            f"–ö—É–ª–¥–∞—É–Ω Lv.{data['cooldown_level']} –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è: {next_date.strftime('%d.%m.%Y')}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å {remaining} –¥–Ω–µ–π"
        )
    else:
        update.message.reply_text(
            f"‚úÖ –ö—É–ª–¥–∞—É–Ω –ø—Ä–æ–π–¥–µ–Ω! –ú–æ–∂–Ω–æ —Å—ä–µ—Å—Ç—å –æ–¥–Ω—É –ø–æ—Ä—Ü–∏—é –¥–∂–∞–Ω–∫—Ñ—É–¥–∞! (–Ω–∞–ø—Ä–∏–º–µ—Ä, üåØ —à–∞—É—Ä–º–∞)\n"
            f"Lv.{data['cooldown_level']} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –µ—â—ë {abs(remaining)} –¥–Ω. –Ω–∞–∑–∞–¥.\n"
            f"–•–æ—á–µ—à—å –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫—É–ª–¥–∞—É–Ω–∞? –ù–∞–ø–∏—à–∏ /lvlup_cd"
        )


def lvlup_cd(update: Update, context: CallbackContext):
    data = load_jfood()

    if not data["last_jfood_date"]:
        update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π –¥–∂–∞–Ω–∫—Ñ—É–¥ —á–µ—Ä–µ–∑ /add_jfood")
        return

    last_date = datetime.strptime(data["last_jfood_date"], "%Y-%m-%d").date()
    cd_days = 30 + data["cooldown_level"]
    next_date = last_date + timedelta(days=cd_days)
    today = datetime.today().date()

    if today >= next_date:
        data["cooldown_level"] += 1
        save_jfood(data)
        update.message.reply_text(
            f"üîº –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å Lv.{data['cooldown_level']} "
            f"‚Äî –∫—É–ª–¥–∞—É–Ω = {30 + data['cooldown_level']} –¥–Ω–µ–π üí™"
        )
    else:
        days_left = (next_date - today).days
        update.message.reply_text(
           f"‚õî –ï—â—ë —Ä–∞–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π –¥–æ –∫–æ–Ω—Ü–∞ –∫—É–ª–¥–∞—É–Ω–∞."
        )
